man 1 kill  (1) Comandos de usuario del shell
==============================================

NAME       : kill - envia una señal a un proceso
SYNOPSIS   : kill [optiones] <pid> [...]
DESCRIPCION: La señal por defecto para kill es TERM.  Usa -l o -L para listar las señales disponibles. 
             Particularly useful signals include HUP, INT, KILL, STOP, CONT, and 0.  
             Alternate signals may be specified in three ways: -9, -SIGKILL or -KILL.  
             Negative PID values may be used to choose whole process groups; see the PGID column in  
             ps command output.  
             A PID of -1 is special; it indicates all processes except the kill process itself and init.
OPTIONS    : <pid> [...]
              Send signal to every <pid> listed.
             -<signal>
             -s <signal>
             --signal <signal> Specify the signal to be sent.  
                               The signal can be specified by using name or number.  
                               The behavior of signals is explained in signal(7) manual page. (7 miscelanias)
             -q, --queue value
              Use  sigqueue(3)  rather  than  kill(2) and the value argument is used to specify an integer to 
              be sent with the signal. If the receiving process has installed a handler for this signal using 
              the SA_SIGINFO flag to sigaction(2) , then it can obtain this data via the si_value field of 
              the siginfo_t structure.
             -l, --list [signal] List signal names.  This option has optional argument, which will convert 
              signal number to signal name, or other way round.
             -L, --table List signal names in a nice table.

NOTES  Your  shell  (command  line interpreter) may have a built-in kill command.  You may need to run the 
command described here as /bin/kill to solve the conflict.

EXAMPLES
       kill -9 -1  Kill all processes you can kill.
       kill -l 11  Translate number 11 into a signal name.
       kill -L     List the available signal choices in a nice table.
       kill 123 543 2341 3453 Send the default signal, SIGTERM, to all those processes.

SEE ALSO: kill(2), killall(1), nice(1), pkill(1), renice(1), signal(7), sigqueue(3), skill(1)



man 2 kill  (2) Llamadas al Sistema.
=====================================

NAME: kill - send signal to a process

SYNOPSIS
       #include <sys/types.h>
       #include <signal.h>

       int kill(pid_t pid, int sig);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)): kill(): _POSIX_C_SOURCE

DESCRIPTION
       The kill() system call can be used to send any signal to any process group or process.
       If pid is positive, then signal sig is sent to the process with the ID specified by pid.
       If pid equals 0, then sig is sent to every process in the process group of the calling process.

       If pid equals -1, then sig is sent to every process for which the calling process has permission 
       to send signals, except for process 1 (init), but see below.
       If pid is less than -1, then sig is sent to every process in the process group whose ID is -pid.
       If  sig  is  0,  then no signal is sent, but existence and permission checks are still performed; 
       this can be used to check for the existence of a process ID or process group ID that the caller is
       permitted to signal.

       For a process to have permission to send a signal, it must either be privileged (under Linux: have
       the CAP_KILL capability in the user namespace of  the  target process), or the real or effective 
       user ID of the sending process must equal the real or saved set-user-ID of the target process.  
       In the case of SIGCONT, it suffices when the sending and receiving processes belong to the same session.  
       (Historically, the rules were different; see NOTES.)

RETURN VALUE
       On success (at least one signal was sent), zero is returned.  On error, -1 is returned, and errno is set 
       appropriately.

ERRORS
       EINVAL An invalid signal was specified.
       EPERM  The calling process does not have permission to send the signal to any of the target processes.
       ESRCH  The target process or process group does not exist.  Note that an existing process might be a zombie, 
              a process that has terminated  execution, but has not yet been wait(2)ed for.
NOTES
       The  only signals that can be sent to process ID 1, the init process, are those for which init has explicitly installed signal handlers.  This is done to assure
       the system is not brought down accidentally.

       POSIX.1 requires that kill(-1,sig) send sig to all processes that the calling process may send signals to, except possibly for some implementation-defined  sys‐
       tem processes.  Linux allows a process to signal itself, but on Linux the call kill(-1,sig) does not signal the calling process.

       POSIX.1 requires that if a process sends a signal to itself, and the sending thread does not have the signal blocked, and no other thread has it unblocked or is
       waiting for it in sigwait(3), at least one unblocked signal must be delivered to the sending thread before the kill() returns.

   Linux notes
       Across different kernel versions, Linux has enforced different rules for the permissions required for an unprivileged  process  to  send  a  signal  to  another
       process.  In kernels 1.0 to 1.2.2, a signal could be sent if the effective user ID of the sender matched effective user ID of the target, or the real user ID of
       the sender matched the real user ID of the target.  From kernel 1.2.3 until 1.3.77, a signal could be sent if the effective user ID of the sender matched either
       the real or effective user ID of the target.  The current rules, which conform to POSIX.1, were adopted in kernel 1.3.78.

       BUGS
       In  2.6  kernels  up  to and including 2.6.7, there was a bug that meant that when sending signals to a process group, kill() failed with the error EPERM if the
       caller did not have permission to send the signal to any (rather than all) of the members of the process group.  Notwithstanding this error return,  the  signal
       was still delivered to all of the processes for which the caller had permission to signal.

SEE ALSO
       kill(1), _exit(2), pidfd_send_signal(2), signal(2), tkill(2), exit(3), killpg(3), sigqueue(3), capabilities(7), credentials(7), signal(7)

COLOPHON
       This  page  is  part  of release 5.10 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest version of
       this page, can be found at https://www.kernel.org/doc/man-pages/.


